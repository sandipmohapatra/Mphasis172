Java
-------------------------
1)Java is a object oriented programing language.
2)Java is portable,secure and scalable language.
3)Java is simpler than c and c++ as we don't have pointer concept,multiple inheritance and operator overloading.
4)In java we have constructor but no destructor as there is automatic garbage clearance.
5)In java we can develop web application,network application ,mobile application and standalone application.
6)Java support multi-threading and exception handling .
7)Java is case sensitive and platform independent.
------------------------------------------------------
Data type(primary)
-------------------
1)byte-1 byte
2)short - 2bytes
3)int - 4 bytes
4)long - 8bytes
5)float - 4 bytes
6)double - 8 bytes
7)char - 2 bytes
8)boolean - 1 bit
-------------------------------
secondary datatype
------------------------------
1)String
2)array
3)class
---------------------------------------
operator
--------------------
1)unary operator :- i++,i--,++i,--i
2)binary operator:-
i)arithmatic:- +,-,*,/,%
ii)bitwise:-<<,>>,nor,and,or
iii)logical:-&&,||
iv)relational:-<,>,<=,>=,!=,==
v)assignment:-=
3)ternary operator:-:,?
----------------------------------------------
Class :- it is a blue print of an object.A class contain variable and methods.

Object:- It is a reference pointer to a class.with an object we can access the variables and methods of a class.

---------------------------
Access specifier (to protect the data/secure the data)
-------
1)public :- if we declare variables and methods as public we can access it inside the class,out side the class and out side the package.

2)private :- if we declare variables and methods as private we can access it inside the class only.

3)protected :- if we declare variables and methods as protected we can access it inside the class,in the child class  and out side the package.

4)default :- if we declare variables and methods as default we can access it inside the class,out side the class 
-------------------------------------------------------
constructor:-
1)it is a method which has the same name as that of the class name.
2)it is used to inistailize the variable.
3)it does not return any value nor it have any return type.
4)it executes automatically when an object is created for a class.
5)we have 2 types of constructor 1)default 2)parameterized
6)if we use more than one constructor in a prgram it is known as constructor overloading.
------------------------------------------------------------------------------------
example:-
-----------------
package Mphasis;
import java.util.*;
public class First 
{	
int empno;
String name,address;
float salary;
	First(int empno,String name,String address,float salary)
	{		
this.empno=empno;		
this.name=name;
this.address=address;
this.salary=salary;
	}
	void display()
{
System.out.println("empno :"+empno+"  "+"name :"+name+"   "+"address :"+address+"salary :"+salary);
}
	public static void main(String[] args) 
	{	
	Scanner ob=new Scanner(System.in);
	System.out.println("enter empno,name,address,salary of an employee");
	int a=ob.nextInt();String b=ob.next();String c=ob.next();float d=ob.nextFloat();
	First obj=new First(a,b,c,d);
		obj.display();	
}
}
-------------------------------------------------
inheritance
------------------
It is the reusablity of code.
java support single inheritance.
we use the keyword super to access the parent class variables and methods.we use key word extends to inherite the parent class into the child class .
we create object for the child class.
-------------------------------------------------------------------
example:-
package Mphasis;
import java.util.*;
class Student
{
	int rollno;
	String name,address;
	void input()
	{
		Scanner ob=new Scanner(System.in);
		System.out.println("enter rollno,name and address");
		rollno=ob.nextInt();name=ob.next();address=ob.next();
	}
	void display()
	{
	System.out.println("rollno :"+rollno+"name :"+name+" address :"+address);
	}}
	class First extends Student
	{
		int m1,m2,m3,tot,avg;
		void input()
		{
			super.input();
			Scanner ob=new Scanner(System.in);
			System.out.println("enter 3 subjects marks");
			m1=ob.nextInt();m2=ob.nextInt();m3=ob.nextInt();
			tot=m1+m2+m3;
			avg=tot/3;
		}
		void display()
		{
			super.display();
			System.out.println("the total is "+tot);
			System.out.println("the average is "+avg);
		}
		public static void main(String[] args) 
		{
		First ob=new First();
		ob.input();
		ob.display();
		}
}
-------------------------------------------------------------
abstract class :-
1)it is incomplete class.we use the keyword abstract.
2)it contain concret methods as well as abstract method.
3)we cannot instanciate an abstract class.
4)we have to override the abstract methods in the child class and create object for the child class.
5)it is used to define the objectives of the project.
---------------------------------------------------------------------------------------------
package Mphasis;
 abstract class  Third
{abstract void create();
abstract void display();
abstract void delete();
void list()
{	System.out.println("this will display list of employee");}}

 public class Second extends Third
 {	void create() {System.out.println("create");	}
	void display() {System.out.println("display");	}
	void delete() {System.out.println("delete");	}
	 public static void main(String[] args) 
	 {		Second obj=new Second();
		obj.create();obj.display();obj.delete();obj.list();	} }


-------------------------------------------------------
Interface
----------------
1)It contain only abstract methods.we donot use the keyword abstract.
2)we have to implement it in the child class and override the abstract methods.
3)we cannot instanciate a interface.
4)the variables declared in the interface is final and static.
5)the override methods should be public.
6)we can extend a interface
-------------------------------------------------------------------------------------------  

package Mphasis;
 interface a
 {
	 int a=10;//final and static
	 void create();
 }
 interface b extends a
 {
	 void display();
 }
 interface c
 {
	 void list();
 }
  class Second implements b,c// multiple inheritance
 {
	public void create() {
		System.out.println("create");	}

	public void list() {
	System.out.println("list");	}

	public void display() {
		System.out.println("display");	}
	 public static void main(String[] args) {
		Second ob=new Second();
		ob.create();ob.display();ob.list();
		System.out.println("the value of a is "+a);
	}
 }
-------------------------------------------------------
package org.mphasis;
public class inheritanceex 
{
int empno;
String name,address;
public inheritanceex(int empno, String name, String address)
{
	this.empno = empno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("empno :"+empno+" name :"+name+" address :"+address);
}}
---------------------------------------------------------------
package org.mphasis;
public class Childex extends inheritanceex 
{
	float salary;
	String design;
	public Childex(int empno, String name, String address,float salary,String design)
	{
		super(empno, name, address);//super class constructor will execute first
		this.salary=salary;
		this.design=design;
			}
	void display()
	{
		super.display();
		System.out.println("salary :"+salary+" design :"+design);
	}
	public static void main(String[] args)
	{
	Childex obj=new Childex(101,"sandip","Pune",4500.53f,"Software eng");	
	obj.display();
	}}
-------------------------------------------------------------
package Mphasis;
public class Encapsulationex 
{
private int empno;
private String name,address;
private float salary;
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
public float getSalary() {
	return salary;
}
public void setSalary(float salary) {
	this.salary = salary;
}


}
---------------------------------
package Mphasis;
public class Test 
{
	public static void main(String[] args) 
	{
		Encapsulationex obj=new Encapsulationex ();
		obj.setEmpno(101);
		obj.setName("sandip");
		obj.setAddress("Pune");
		obj.setSalary(4500.50f);
System.out.println("empno :"+obj.getEmpno()+" name :"+obj.getName()+" address :"+obj.getAddress());
System.out.println("salary :"+obj.getSalary());	
	}}
---------------------------
has-a relationship
---------------------------------------------------------------------------
package org.mphasis;

public class Address 
{
private int buildno,roadno;
private String sname,city;
public Address(int buildno, int roadno, String sname, String city) 
{
	this.buildno = buildno;
	this.roadno = roadno;
	this.sname = sname;
	this.city = city;
}
public String toString() //convert object to String 
{
	return "buildno=" + buildno + ", roadno=" + roadno + ", sname="
			+ sname + ", city=" + city ;
}}
-----------------------------------------------------------------------------------
package org.mphasis;
public class Employee 
{
private int empno;
private String name,design;
private Address add;
public Employee(int empno, String name, String design, Address add)
{
	this.empno = empno;
	this.name = name;
	this.design = design;
	this.add = add;
}

void display()
{
	System.out.println("empno:"+empno+" name :"+name+" designation :"+design+"Address :"+add);
	}}
------------------------------------------------------------------
package org.mphasis;

public class Testemp 
{
public static void main(String[] args) 
{
Address ob=new Address(101,20,"kharadi","pune");
Employee emp=new Employee(1001,"sandip","Trainer",ob);
emp.display();
}}
-----------------------------------------------------------------------------
final is a keyword .we can define a class as final ,variable as final and method as final.

if we declare a class as final we cannot inherite it.
if we declare a variable as final we cannot change it and we have to assign it.
if we declare a method as final we cannot override it.
it is used to create immutable class.(it cannot be changed example String class)
------------------------------------------------------------------------------------------------------------------
package Mphasis;
public final class Finalex //cannot be inherited 
{
final int a=10;
final void display()//cannot override
{
	System.out.println("the value of a is "+a);
	System.out.println("this is final method");
}
public static void main(String[] args) {
	Finalex ob=new Finalex();
	ob.display();
}
}
-----------------------------------------------------------------------
static :-The static keyword in Java is used for memory management mainly.
We can apply java static keyword with variables, methods, blocks 
and nested class.
It makes your program memory efficient (it saves memory).
The static variable gets memory only once in 
the class area at the time of class loading.
static block execute before the main method.
we access the static variables and methods without an object or by a class.
we cannot access a non static variable inside a static method.
----------------------------------------------------------------------------------------
package Mphasis;
public class Staticex 
{
static int a=10;
static void display()
{
	System.out.println("this is a static method");
}
static 
{
	System.out.println("this is a static block");
}
public static void main(String[] args) 
{
display();
System.out.println(a);}}
----------------------------------------------------
inner class
--------------------
package Mphasis;
class TestMemberOuter1
{  
 private static int data=30;  
static class Inner
 {  
  void msg()
  {
	  System.out.println("data is "+data);
  }   }  
 public static void main(String args[])
 {  
  TestMemberOuter1 obj=new TestMemberOuter1();  
  //TestMemberOuter1.Inner in=obj.new Inner(); 
 Inner in=new Inner(); 
  in.msg();  
 }  }  
-----------------------------------------------------
Exception Handling
--------------------------------------
It has 5 keywords
1)try 2)catch 3)finally 4)throw 5)throws
---------------------------------------------------------------
1)try-catch :- if error comes the try will be successfull and catch will be also successfull.
2)try-finally :- if there is error or not it does not matter the finally block will definetly execute. it is used for closing of connections and files.
-------------------------------
package Mphasis;
import java.util.*;
public class Exception1 
{
	public static void main(String[] args)
{	
		try
	{
			Scanner ob=new Scanner(System.in);
	System.out.println("enter 2 no");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=a/b;
	System.out.println("the result is "+c);	
	}
		catch(ArithmeticException ae)
		{
			ae.printStackTrace();
		}
		catch(NumberFormatException ae)
		{
			ae.printStackTrace();
		}
		catch(Exception ae)
		{
			ae.printStackTrace();
		}
	finally
	{			System.out.println("welcome to exception handling");

	}
		}}
-------------------------------------------------
package Mphasis;
import java.util.*;
public class Exception1 
{
	public static void main(String[] args)
{	
		try
	{
			Scanner ob=new Scanner(System.in);
	System.out.println("enter 2 no");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=a/b;
	System.out.println("the result is "+c);	
	try
	{
		int x[]=new int[5];
		System.out.println("enter 5 nos");
		for(int i=0;i<5;i++)
			x[i]=ob.nextInt();
		System.out.println("5 nos are");
		for(int i=0;i<=5;i++)
			System.out.println(x[i]);
			}
		catch(Exception ae)
		{			ae.printStackTrace();		}	}
	catch(Exception ab)
	{
		ab.printStackTrace();	}}}
---------------------------------------------------------------------------------
package Mphasis;
import java.util.*;
public class Exception1 
{
	public static void main(String[] args) throws Exception
{	
Scanner ob=new Scanner(System.in);
System.out.println("enter your age");
int age=ob.nextInt();
if(age>18)
	System.out.println("Eligible to vote");
else
	throw new Exception ("You are not eligible to vote");
}}
-------------------------------------------------------------------------------------------------------------	
 files
----------------
import java.io.*;
import java.util.*;
class a
{public static void main(String arg[])
{	Scanner ob=new Scanner(System.in);
	System.out.println("enter the file name");
String fname=ob.next();
File f=new File(fname);
System.out.println("file name:"+f.getName());
System.out.println("file path:"+f.getPath());
System.out.println("file path:"+f.getAbsolutePath());
System.out.println("file exists:"+f.exists());
if(f.exists()){
System.out.println("file can write:"+f.canWrite());
System.out.println("file can read:"+f.canRead());
System.out.println("file type:"+f.isDirectory());
System.out.println("file length:"+f.length());}}} 
-------------------------------------------------------------------------






































 




















